import { apiGet, apiPost, apiGetCampaignErrors } from '../ui/api.js';

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
export function renderHistoryPage() {
  return `
    <div class="history-header">
      <h2>üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫</h2>
      <p class="history-subtitle">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫</p>
    </div>
    
    <div class="history-stats">
      <div class="stat-card">
        <div class="stat-icon">üìà</div>
        <div class="stat-content">
          <div class="stat-number" id="total-campaigns">-</div>
          <div class="stat-label">–í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫</div>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon">‚úÖ</div>
        <div class="stat-content">
          <div class="stat-number" id="completed-campaigns">-</div>
          <div class="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon">üîÑ</div>
        <div class="stat-content">
          <div class="stat-number" id="active-campaigns">-</div>
          <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã–µ</div>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon">‚ùå</div>
        <div class="stat-content">
          <div class="stat-number" id="failed-campaigns">-</div>
          <div class="stat-label">–û—à–∏–±–∫–∏</div>
        </div>
      </div>
    </div>

    <div class="history-container">
      <div class="history-controls">
        <div class="search-box">
          <input type="text" id="search-campaigns" placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..." />
        </div>
        <div class="filter-controls">
          <select id="status-filter">
            <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
            <option value="started">–ó–∞–ø—É—â–µ–Ω–∞</option>
            <option value="finished">–ó–∞–≤–µ—Ä—à–µ–Ω–∞</option>
            <option value="failed">–û—à–∏–±–∫–∞</option>
            <option value="pending">–û–∂–∏–¥–∞–µ—Ç</option>
          </select>
          <button id="refresh-history" class="refresh-btn">
            <span class="refresh-icon">üîÑ</span>
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
      </div>
      
      <div class="history-table-container">
        <table id="history-table" class="history-table">
          <thead>
            <tr>
              <th>üìù –ù–∞–∑–≤–∞–Ω–∏–µ</th>
              <th>üìä –°—Ç–∞—Ç—É—Å</th>
              <th>üìà –ü—Ä–æ–≥—Ä–µ—Å—Å</th>
              <th>‚è±Ô∏è –°–æ–æ–±—â./—á–∞—Å</th>
              <th>‚ùó –û—à–∏–±–∫–∏</th>
              <th>üìÖ –î–∞—Ç–∞</th>
              <th>üîß –î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody id="history-tbody">
            <tr>
              <td colspan="6" class="loading">
                <div class="loading-spinner"></div>
                <span>–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</span>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
    
    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ -->
    <div id="campaign-modal" class="modal">
      <div class="modal-content">
        <div class="modal-header">
          <h3 id="modal-title">üìã –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</h3>
          <span class="close">&times;</span>
        </div>
        <div id="modal-body">
          <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
        </div>
      </div>
    </div>
  `;
}

export function initHistoryPage(showToast) {
  const refreshBtn = document.getElementById('refresh-history');
  const searchInput = document.getElementById('search-campaigns');
  const statusFilter = document.getElementById('status-filter');
  const modal = document.getElementById('campaign-modal');
  const closeBtn = document.querySelector('.close');
  const modalTitle = document.getElementById('modal-title');
  const modalBody = document.getElementById('modal-body');

  let allCampaigns = []; // –•—Ä–∞–Ω–∏–º –≤—Å–µ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  loadHistory();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  refreshBtn.onclick = loadHistory;
  searchInput.oninput = filterCampaigns;
  statusFilter.onchange = filterCampaigns;
  closeBtn.onclick = () => modal.style.display = 'none';
  window.onclick = (event) => {
    if (event.target === modal) {
      modal.style.display = 'none';
    }
  };

  async function loadHistory() {
    const tbody = document.getElementById('history-tbody');
    tbody.innerHTML = `
      <tr>
        <td colspan="6" class="loading">
          <div class="loading-spinner"></div>
          <span>–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</span>
        </td>
      </tr>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ –∫–Ω–æ–ø–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    refreshBtn.classList.add('refreshing');
    refreshBtn.disabled = true;

    try {
      const campaigns = await apiGet('/api/v1/messages/campaigns', showToast);
      console.log('API response:', campaigns);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ campaigns —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
      if (!campaigns || !Array.isArray(campaigns)) {
        console.log('Invalid response format:', typeof campaigns, campaigns);
        showEmptyState();
        return;
      }
      
      allCampaigns = campaigns;
      updateStats(campaigns);
      renderCampaigns(campaigns);
    } catch (error) {
      console.error('Error loading history:', error);
      showErrorState();
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ apiGet
    } finally {
      refreshBtn.classList.remove('refreshing');
      refreshBtn.disabled = false;
    }
  }

  function updateStats(campaigns) {
    const total = campaigns.length;
    const completed = campaigns.filter(c => c.status === 'finished').length;
    const active = campaigns.filter(c => c.status === 'started').length;
    const failed = campaigns.filter(c => c.status === 'failed').length;

    document.getElementById('total-campaigns').textContent = total;
    document.getElementById('completed-campaigns').textContent = completed;
    document.getElementById('active-campaigns').textContent = active;
    document.getElementById('failed-campaigns').textContent = failed;
  }

  function filterCampaigns() {
    const searchTerm = searchInput.value.toLowerCase();
    const statusFilterValue = statusFilter.value;

    const filtered = allCampaigns.filter(campaign => {
      const matchesSearch = !searchTerm || 
        (campaign.name && campaign.name.toLowerCase().includes(searchTerm)) ||
        campaign.message.toLowerCase().includes(searchTerm);
      
      const matchesStatus = !statusFilterValue || campaign.status === statusFilterValue;
      
      return matchesSearch && matchesStatus;
    });

    renderCampaigns(filtered);
  }

  function renderCampaigns(campaigns) {
    const tbody = document.getElementById('history-tbody');
    
    if (campaigns.length === 0) {
      showEmptyState();
      return;
    }

    tbody.innerHTML = campaigns.map(campaign => `
      <tr data-id="${campaign.id}" class="campaign-row">
        <td class="campaign-name">
          <div class="name-content">
            <div class="name-text">${campaign.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</div>
            ${campaign.media_filename ? '<div class="media-indicator"></div>' : ''}
          </div>
        </td>
        <td>
          <span class="status status-${campaign.status}">
            ${getStatusIcon(campaign.status)} ${getStatusText(campaign.status)}
          </span>
        </td>
        <td class="campaign-progress">
          <div class="progress-info">
            <div class="progress-numbers">
              <span class="processed-number">${campaign.processed_count}</span>
              <span class="separator">/</span>
              <span class="total-number">${campaign.total}</span>
            </div>
            <div class="progress-bar">
              <div class="progress-fill" style="width: ${getProgressPercentage(campaign.processed_count, campaign.total)}%"></div>
            </div>
            <div class="progress-percentage">${getProgressPercentage(campaign.processed_count, campaign.total)}%</div>
          </div>
        </td>
        <td class="campaign-speed">
          <span class="speed-number">${campaign.messages_per_hour}</span>
          <span class="speed-label">/—á–∞—Å</span>
        </td>
        <td class="campaign-errors">
          <span class="error-count">${campaign.error_count || 0}</span>
        </td>
        <td class="campaign-date">
          <div class="date-content">
            <div class="date-main">${formatDate(campaign.created_at)}</div>
            <div class="date-relative">${getRelativeTime(campaign.created_at)}</div>
          </div>
        </td>
        <td class="campaign-actions">
          <button class="details-btn" data-id="${campaign.id}" title="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏">
            üëÅÔ∏è –î–µ—Ç–∞–ª–∏
          </button>
        </td>
      </tr>
    `).join('');

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ—Ç–∞–ª–µ–π
    document.querySelectorAll('.details-btn').forEach(btn => {
      btn.onclick = (e) => {
        e.preventDefault();
        const campaignId = btn.dataset.id;
        showCampaignDetails(campaignId);
      };
    });
  }

  function showEmptyState() {
    const tbody = document.getElementById('history-tbody');
    tbody.innerHTML = `
      <tr>
        <td colspan="6" class="empty">
          <div class="empty-state">
            <div class="empty-icon">üì≠</div>
            <div class="empty-text">–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫ –ø—É—Å—Ç–∞</div>
            <div class="empty-subtext">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"</div>
          </div>
        </td>
      </tr>
    `;
  }

  function showErrorState() {
    const tbody = document.getElementById('history-tbody');
    tbody.innerHTML = `
      <tr>
        <td colspan="6" class="error">
          <div class="error-state">
            <div class="error-icon">‚ùå</div>
            <div class="error-text">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏</div>
            <button class="retry-btn" onclick="loadHistory()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
          </div>
        </td>
      </tr>
    `;
  }

  async function showCampaignDetails(campaignId) {
    modal.style.display = 'block';
    modalTitle.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
    modalBody.innerHTML = '<div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π...</div>';

    try {
      const campaign = await apiGet(`/api/v1/messages/campaigns/${campaignId}`, showToast);
      modalTitle.textContent = campaign.name || '–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏';
      modalBody.innerHTML = `
        <div class="campaign-details">
          <div class="detail-section">
            <h4>üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
            <div class="detail-grid">
              <div class="detail-item">
                <label>ID –†–∞—Å—Å—ã–ª–∫–∏:</label>
                <span class="detail-value">${campaign.id}</span>
              </div>
              <div class="detail-item">
                <label>–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
                <span class="detail-value">${campaign.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
              </div>
              <div class="detail-item">
                <label>–°—Ç–∞—Ç—É—Å:</label>
                <span class="status status-${campaign.status}">${getStatusText(campaign.status)}</span>
              </div>
              <div class="detail-item">
                <label>–î–∞—Ç–∞:</label>
                <span class="detail-value">${formatDate(campaign.created_at)}</span>
              </div>
            </div>
          </div>
          
          <div class="detail-section">
            <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
            <div class="detail-grid">
              <div class="detail-item">
                <label>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:</label>
                <div class="progress-detail">
                  <div class="progress-numbers">
                    <span class="processed-number">${campaign.processed_count}</span>
                    <span class="separator">/</span>
                    <span class="total-number">${campaign.total}</span>
                    <span class="progress-percentage">(${getProgressPercentage(campaign.processed_count, campaign.total)}%)</span>
                  </div>
                  <div class="progress-bar">
                    <div class="progress-fill" style="width: ${getProgressPercentage(campaign.processed_count, campaign.total)}%"></div>
                  </div>
                </div>
              </div>
              <div class="detail-item">
                <label>–°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å:</label>
                <span class="detail-value">${campaign.messages_per_hour}</span>
              </div>
              ${campaign.initiator ? `
              <div class="detail-item">
                <label>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</label>
                <span class="detail-value">${campaign.initiator}</span>
              </div>
              ` : ''}
            </div>
          </div>
          
          <div class="detail-section">
            <h4>üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ</h4>
            <div class="message-preview">${campaign.message}</div>
          </div>
          
          ${campaign.media_filename ? `
          <div class="detail-section">
            <h4>üìé –ú–µ–¥–∏–∞ —Ñ–∞–π–ª</h4>
            <div class="media-info">
              <div class="media-item">
                <span class="media-icon">üìé</span>
                <div class="media-details">
                  <div class="media-name">${campaign.media_filename}</div>
                  <div class="media-type">${campaign.media_type} (${campaign.media_mime})</div>
                </div>
              </div>
            </div>
          </div>
          ` : ''}
          
          <div class="detail-section" ${campaign.status === 'finished' && campaign.error_count <= 0 ? 'style="padding-bottom: 25px;"' : ''}>
            <h4>üìä –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (${campaign.processed_count})</h4>
            <div class="sent-numbers-container">
              <div class="sent-numbers-header">
                <span class="sent-numbers-label">–ù–æ–º–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:</span>
                <button class="copy-numbers-btn" onclick="copySentNumbers('${campaign.id}')" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –Ω–æ–º–µ—Ä–∞">
                  üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                </button>
              </div>
              <div class="sent-numbers-list" id="sent-numbers-${campaign.id}">
                <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–º–µ—Ä–æ–≤...</div>
              </div>
            </div>
          </div>
          
          ${campaign.status === 'started' ? `
          <div class="detail-section" ${campaign.error_count <= 0 ? 'style="padding-bottom: 25px;"' : ''}">
            <h4>‚ö° –î–µ–π—Å—Ç–≤–∏—è</h4>
            <div class="actions-container">
              <button class="cancel-campaign-btn" onclick="cancelCampaign('${campaign.id}', '${campaign.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}')">
                <span class="cancel-icon">üö´</span>
                <span class="cancel-text">–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É</span>
              </button>
            </div>
          </div>
          ` : ''}
          
          ${campaign.error_count > 0 ? `
          <div class="detail-section" style="padding-bottom: 25px;">
            <h4>‚ùó –û—à–∏–±–∫–∏ (${campaign.error_count})</h4>
            <div class="errors-container" id="errors-${campaign.id}">
              <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –æ—à–∏–±–æ–∫...</div>
            </div>
          </div>
          ` : ''}
        </div>
      `;
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–º–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–µ—Ç–∞–ª–µ–π
      setTimeout(() => {
        loadSentNumbers(campaign.id);
      }, 100);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–µ—Ç–∞–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (campaign.error_count > 0) {
        setTimeout(() => {
          showCampaignErrors(campaign.id);
        }, 200);
      }
    } catch (error) {
      console.error('Error loading campaign details:', error);
      modalTitle.textContent = '–û—à–∏–±–∫–∞';
      modalBody.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏</div>';
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ apiGet
    }
  }

  function getStatusIcon(status) {
    const iconMap = {
      'started': 'üîÑ',
      'finished': '‚úÖ',
      'failed': '‚ùå',
      'pending': '‚è≥',
      'cancelled': 'üö´'
    };
    return iconMap[status] || '‚ùì';
  }

  function getStatusText(status) {
    const statusMap = {
      'started': '–ó–∞–ø—É—â–µ–Ω–∞',
      'finished': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
      'failed': '–û—à–∏–±–∫–∞',
      'pending': '–û–∂–∏–¥–∞–µ—Ç',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
    };
    return statusMap[status] || status;
  }

  function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  function getRelativeTime(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now - date;
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);

    if (diffMins < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    if (diffDays < 7) return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
    return `${Math.floor(diffDays / 7)} –Ω–µ–¥ –Ω–∞–∑–∞–¥`;
  }

  function getProgressPercentage(processedCount, totalCount) {
    return Math.round((processedCount / totalCount) * 100);
  }

  // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é loadHistory –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–≤—Ç–æ—Ä–∞
  window.loadHistory = loadHistory;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ onclick)
  window.cancelCampaign = async function(campaignId, campaignName) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É "${campaignName}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
      return;
    }

    try {
      await apiPost(`/api/v1/messages/campaigns/${campaignId}/cancel`, {}, showToast);
      showToast('–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', 'success');
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      modal.style.display = 'none';
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
      loadHistory();
    } catch (error) {
      console.error('Error cancelling campaign:', error);
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ apiPost
    }
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
  async function loadSentNumbers(campaignId) {
    try {
      const response = await apiGet(`/api/v1/messages/campaigns/${campaignId}/sent-numbers`, showToast);
      const container = document.getElementById(`sent-numbers-${campaignId}`);
      
      if (response.sent_numbers && response.sent_numbers.length > 0) {
        const numbersText = response.sent_numbers.join('\n');
        container.innerHTML = `
          <textarea class="sent-numbers-textarea" readonly>${numbersText}</textarea>
        `;
      } else {
        container.innerHTML = '<div class="empty-numbers">–ù–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤</div>';
      }
    } catch (error) {
      console.error('Error loading sent numbers:', error);
      const container = document.getElementById(`sent-numbers-${campaignId}`);
      container.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–º–µ—Ä–æ–≤</div>';
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
  window.copySentNumbers = async function(campaignId) {
    try {
      const response = await apiGet(`/api/v1/messages/campaigns/${campaignId}/sent-numbers`, showToast);
      
      if (response.sent_numbers && response.sent_numbers.length > 0) {
        const numbersText = response.sent_numbers.join('\n');
        await navigator.clipboard.writeText(numbersText);
        showToast('–ù–æ–º–µ—Ä–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 'success');
      } else {
        showToast('–ù–µ—Ç –Ω–æ–º–µ—Ä–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'info');
      }
    } catch (error) {
      console.error('Error copying sent numbers:', error);
      showToast('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤', 'error');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–æ–∫
  window.showCampaignErrors = async function(campaignId) {
    try {
      const response = await apiGetCampaignErrors(campaignId, showToast);
      
      if (response.errors && response.errors.length > 0) {
        const errorMessages = response.errors.map(error => `
          <div class="error-item">
            <div class="error-phone">${error.phone_number}</div>
            <div class="error-message">${error.error}</div>
          </div>
        `).join('');
        
        const errorsContainer = document.getElementById(`errors-${campaignId}`);
        errorsContainer.innerHTML = `
          <div class="errors-list">
            ${errorMessages}
          </div>
        `;
      } else {
        const errorsContainer = document.getElementById(`errors-${campaignId}`);
        errorsContainer.innerHTML = '<div class="no-errors">–ù–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞</div>';
      }
    } catch (error) {
      console.error('Error showing campaign errors:', error);
      const errorsContainer = document.getElementById(`errors-${campaignId}`);
      errorsContainer.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—à–∏–±–æ–∫</div>';
    }
  };
} 