import { apiPost, apiGet } from '../ui/api.js';

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
const fileIcon = `<svg fill="none" viewBox="0 0 20 20"><rect width="16" height="18" x="2" y="1" fill="#fff" stroke="#2d8cff" stroke-width="1.5" rx="4"/><path stroke="#2d8cff" stroke-width="1.5" d="M6 6h8M6 10h8M6 14h5"/></svg>`;

export function renderBulkPage() {
  return `
    <h2>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</h2>
    <div class="bulk-form-container">
      <form id="bulk-form" class="form" enctype="multipart/form-data">
        <label>–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ <input name="name" required autocomplete="off" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –õ–µ—Ç–Ω—è—è –∞–∫—Ü–∏—è"></label>
        <label class="file-label">
          –§–∞–π–ª –Ω–æ–º–µ—Ä–æ–≤ (xlsx)
          <span class="file-input-wrapper">
            <span class="file-input-label">${fileIcon} <span>–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª</span>
              <input type="file" name="numbers_file" class="file-input" accept=".xlsx" required>
            </span>
            <span class="file-name" id="file-name-xlsx">–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω</span>
          </span>
        </label>
        <label>–°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å <input type="number" name="messages_per_hour" min="1" value="20" required placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 25"></label>
        <label>
          –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤
          <select name="selected_category_name" id="category-select">
            <option value="">–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
            <option value="loading" disabled>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</option>
          </select>
          <div class="category-hint">üí° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∏—Ö –ø–æ–∫—É–ø–∫–∞–º</div>
        </label>
        <label>–°–æ–æ–±—â–µ–Ω–∏–µ <textarea name="message" required placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è..."></textarea></label>
        <label class="file-label">
          –ú–µ–¥–∏–∞ —Ñ–∞–π–ª
          <span class="file-input-wrapper">
            <span class="file-input-label">${fileIcon} <span>–í—ã–±—Ä–∞—Ç—å –º–µ–¥–∏–∞</span>
              <input type="file" name="media_file" class="file-input" accept="image/*,video/*,audio/*">
            </span>
            <span class="file-name" id="file-name-media">–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω</span>
          </span>
        </label>
        <div class="form-actions">
          <input name="testPhone" placeholder="–ù–æ–º–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞" autocomplete="off" disabled>
          <button type="button" id="send-test" disabled>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç</button>
          <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </div>
      </form>
      
      <div class="bulk-form-sidebar">
        <div class="additional-numbers-section">
          <h4>‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä–∞</h4>
          <p class="section-description">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∫ —Ñ–∞–π–ª—É (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)</p>
          <textarea 
            name="additional_numbers" 
            class="numbers-textarea" 
            placeholder="71234567890&#10;79876543210&#10;75551234567"
            rows="6"
          ></textarea>
        </div>
        
        <div class="exclude-numbers-section">
          <h4>üö´ –ò—Å–∫–ª—é—á–∏—Ç—å –Ω–æ–º–µ—Ä–∞</h4>
          <p class="section-description">–ù–æ–º–µ—Ä–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)</p>
          <textarea 
            name="exclude_numbers" 
            class="numbers-textarea" 
            placeholder="71234567890&#10;79876543210&#10;75551234567"
            rows="6"
          ></textarea>
          <div class="exclude-hint">
            üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞
          </div>
        </div>
        
        <div class="numbers-summary">
          <h4>üìä –°–≤–æ–¥–∫–∞ –Ω–æ–º–µ—Ä–æ–≤</h4>
          <div class="summary-item">
            <span class="summary-label">–ò–∑ —Ñ–∞–π–ª–∞:</span>
            <span class="summary-value" id="file-count">0</span>
          </div>
          <div class="summary-item">
            <span class="summary-label">–î–æ–±–∞–≤–∏—Ç—å:</span>
            <span class="summary-value" id="add-count">0</span>
          </div>
          <div class="summary-item">
            <span class="summary-label">–ò—Å–∫–ª—é—á–∏—Ç—å:</span>
            <span class="summary-value" id="exclude-count">0</span>
          </div>
          <div class="summary-item total">
            <span class="summary-label">–ò—Ç–æ–≥–æ:</span>
            <span class="summary-value" id="total-count">0</span>
          </div>
        </div>
      </div>
    </div>
  `;
}

export function initBulkForm(showToast) {
  const form = document.getElementById('bulk-form');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  loadCategories(showToast);
  
  // –ö–∞—Å—Ç–æ–º–Ω—ã–µ file input'—ã
  const fileInput = form.querySelector('input[name="numbers_file"]');
  const fileName = document.getElementById('file-name-xlsx');
  fileInput.onchange = async () => {
    fileName.textContent = fileInput.files[0]?.name || '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω';
    if (fileInput.files[0]) {
      fileName.style.color = '#2ecc40';
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ
      await countRowsInFile(fileInput.files[0]);
    } else {
      fileName.style.color = '#b0b0b0';
      document.getElementById('file-count').textContent = '0';
    }
    updateNumbersSummary();
  };
  
  const mediaInput = form.querySelector('input[name="media_file"]');
  const mediaName = document.getElementById('file-name-media');
  mediaInput.onchange = () => {
    mediaName.textContent = mediaInput.files[0]?.name || '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω';
    if (mediaInput.files[0]) mediaName.style.color = '#2ecc40';
    else mediaName.style.color = '#b0b0b0';
  };

  const testBtn = document.getElementById('send-test');
  testBtn.disabled = false;
  form.testPhone.disabled = false;
  form.testPhone.placeholder = '7XXXXXXXXXX';

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø–∏–Ω–Ω–µ—Ä–∞
  function setLoading(isLoading, btn) {
    if (isLoading) {
      btn.disabled = true;
      btn.innerHTML = '–û—Ç–ø—Ä–∞–≤–∫–∞... <span class="spinner"></span>';
    } else {
      btn.disabled = false;
      btn.textContent = btn.id === 'send-test' ? '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
    }
  }

  testBtn.onclick = async () => {
    const testPhone = form.testPhone.value.trim();
    const message = form.message.value.trim();
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
    if (!/^7\d{10}$/.test(testPhone)) {
      showToast('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7', 'danger');
      form.testPhone.classList.add('error');
      form.testPhone.focus();
      return;
    } else {
      form.testPhone.classList.remove('error');
    }
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!message) {
      showToast('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', 'danger');
      form.message.classList.add('error');
      form.message.focus();
      return;
    } else {
      form.message.classList.remove('error');
    }
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (form.media_file.files[0]) {
      const file = form.media_file.files[0];
      if (file.size > 20 * 1024 * 1024) {
        showToast('–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 –ú–ë', 'danger');
        return;
      }
    }
    
    setLoading(true, testBtn);
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const fd = new FormData();
      fd.append('phone_number', testPhone);
      fd.append('message', message);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (form.media_file.files[0]) {
        fd.append('media', form.media_file.files[0]);
      }
      
      const response = await apiPost('/api/v1/test-message', fd, showToast);
       
      if (response.success) {
        showToast('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', 'success');
      } else {
        showToast(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'danger');
      }
    } catch (error) {
      console.error('Error sending test message:', error);
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ apiPost
    } finally {
      setLoading(false, testBtn);
    }
  };

  form.onsubmit = async e => {
    e.preventDefault();
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    const message = form.message.value.trim();
    if (!message) {
      showToast('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è', 'danger');
      form.message.classList.add('error');
      form.message.focus();
      return;
    } else {
      form.message.classList.remove('error');
    }
    if (!form.numbers_file.files[0]) {
      showToast('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –Ω–æ–º–µ—Ä–æ–≤', 'danger');
      form.numbers_file.classList.add('error');
      form.numbers_file.focus();
      return;
    } else {
      form.numbers_file.classList.remove('error');
    }
    if (form.media_file.files[0]) {
      const file = form.media_file.files[0];
      if (file.size > 20 * 1024 * 1024) {
        showToast('–ú–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 –ú–ë', 'danger');
        return;
      }
    }
    
    setLoading(true, form.querySelector('button[type="submit"]'));
    const fd = new FormData();
    fd.append('name', form.name.value.trim());
    fd.append('message', message);
    fd.append('messages_per_hour', form.messages_per_hour.value);
    fd.append('numbers_file', form.numbers_file.files[0]);
    if (form.media_file.files[0]) fd.append('media', form.media_file.files[0]);
    fd.append('initiator', 'frontend');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ –Ω–æ–º–µ—Ä–∞
    const additionalTextarea = document.querySelector('textarea[name="additional_numbers"]');
    const excludeTextarea = document.querySelector('textarea[name="exclude_numbers"]');
    
    const additionalNumbers = additionalTextarea ? additionalTextarea.value.trim() : '';
    const excludeNumbers = excludeTextarea ? excludeTextarea.value.trim() : '';
    
    if (additionalNumbers) {
      fd.append('additional_numbers', additionalNumbers);
    }
    if (excludeNumbers) {
      fd.append('exclude_numbers', excludeNumbers);
    }
    
    try {
      const response = await apiPost('/api/v1/campaigns', fd, showToast);
      
      // –ù–∞—à API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {campaign: {...}}
      const campaignId = response.campaign?.id;
      
      if (campaignId) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
        await apiPost(`/api/v1/campaigns/${campaignId}/start`, {}, showToast);
        showToast('–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞', 'success');
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        form.reset();
        document.getElementById('file-name-xlsx').textContent = '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω';
        document.getElementById('file-name-media').textContent = '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω';
        updateNumbersSummary();
      } else {
        showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–∏', 'danger');
      }
    } catch (error) {
      console.error('Error starting bulk campaign:', error);
      // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ apiPost
    } finally {
      setLoading(false, form.querySelector('button[type="submit"]'));
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç—Ä–æ–∫ –≤ Excel —Ñ–∞–π–ª–µ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è)
  async function countRowsInFile(file) {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      const fileCountElement = document.getElementById('file-count');
      fileCountElement.textContent = '...';
      
      // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö / –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
      // –≠—Ç–æ –æ—á–µ–Ω—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è Excel —Ñ–∞–π–ª–æ–≤
      const fileSizeKB = file.size / 1024;
      let estimatedRows;
      
      if (fileSizeKB < 50) {
        estimatedRows = Math.floor(fileSizeKB * 50); // ~50 —Å—Ç—Ä–æ–∫ –Ω–∞ –ö–ë –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
      } else {
        estimatedRows = Math.floor(fileSizeKB * 30); // ~30 —Å—Ç—Ä–æ–∫ –Ω–∞ –ö–ë –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
      }
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑—É–º–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      estimatedRows = Math.max(10, Math.min(estimatedRows, 50000));
      
      fileCountElement.textContent = `~${estimatedRows}`;
      fileCountElement.title = '–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞';
      
    } catch (error) {
      console.error('Error estimating rows in file:', error);
      const fileCountElement = document.getElementById('file-count');
      fileCountElement.textContent = '~';
      fileCountElement.title = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Å—Ç—Ä–æ–∫';
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–æ–º–µ—Ä–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ
  function countNumbers(text) {
    if (!text.trim()) return 0;
    return text.trim().split('\n').filter(line => line.trim()).length;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –Ω–æ–º–µ—Ä–æ–≤
  function updateNumbersSummary() {
    const fileCount = parseInt(document.getElementById('file-count').textContent) || 0;
    const addCount = countNumbers(form.additional_numbers.value);
    const excludeCount = countNumbers(form.exclude_numbers.value);
    const total = Math.max(0, fileCount + addCount - excludeCount);
    
    document.getElementById('add-count').textContent = addCount;
    document.getElementById('exclude-count').textContent = excludeCount;
    document.getElementById('total-count').textContent = total;
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ RetailCRM
async function loadCategories(showToast) {
  const categorySelect = document.getElementById('category-select');
  
  try {
    const response = await apiGet('/api/v1/retailcrm/categories', showToast);
    
    if (response.success && response.categories) {
      // –û—á–∏—â–∞–µ–º –æ–ø—Ü–∏—é "–ó–∞–≥—Ä—É–∑–∫–∞..."
      categorySelect.innerHTML = '<option value="">–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      response.categories.forEach(category => {
        const option = document.createElement('option');
        option.value = category.name;
        option.textContent = category.name;
        categorySelect.appendChild(option);
      });
      
      console.log(`Loaded ${response.categories.length} categories`);
    } else {
      console.error('Failed to load categories:', response);
      categorySelect.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</option>';
    }
  } catch (error) {
    console.error('Error loading categories:', error);
    categorySelect.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</option>';
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
const additionalTextarea = document.querySelector('textarea[name="additional_numbers"]');
const excludeTextarea = document.querySelector('textarea[name="exclude_numbers"]');

if (additionalTextarea) {
  additionalTextarea.addEventListener('input', updateNumbersSummary);
}
if (excludeTextarea) {
  excludeTextarea.addEventListener('input', updateNumbersSummary);
} 